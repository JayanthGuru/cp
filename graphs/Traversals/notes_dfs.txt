DFS :

    => Uses Stack for implementation

    TC : O(|V| + |E|)
    SC : O(|V|) [stack space](at max)

-> Recursive pseudo code:
   --------- ------ ----

procedure DFS(G, v) is
    label v as discovered
    for all directed edges from v to w that are in G.adjacentEdges(v) do
        if vertex w is not labeled as discovered then
            recursively call DFS(G, w)


-> Iterative pseudo code: (with the possibility of duplicate vertices on the stack)
   --------- ------ ----

procedure DFS_iterative(G, v) is
    let S be a stack
    S.push(v)
    while S is not empty do
        v = S.pop()
        if v is not labeled as discovered then
            label v as discovered
            for all edges from v to w in G.adjacentEdges(v) in reverse order do 
                S.push(w)


Applications:
------------
1. Detecting cycles in a graph.
2. Finding path between two nodes.
3. Solving maze problems.
4. Finding number of components in a graph.
5. Topological Sort.
6. Finding the bridges/cut-edges in a graph.
7. Checking the Bi-connectivity in a graph.



* Interview Question -> update the iterative approach such that stack does not contain duplicates at any time:
    
