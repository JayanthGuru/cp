BFS:

    => Uses Queue for implementation

    TC : O(|V| + |E|)
    SC : O(|V|) [Queue space](at max)

-> Recursive pseudo code:
   --------- ------ ----
    --G is graph
    --Q is queue with start element


procedure BFS(G, Q) is
    if Q is empty then 
        return
    v = Q.deque()
    label v as discovered
    for all directed edges from v to w that are in G.adjacentEdges(v) do
        if vertex w is not labeled as discovered then 
            Q.enque(w)
    BFS(G, Q)


-> Iterative pseudo code:
   --------- ------ ----
    --G is graph
    --S is start node

procedure BFS(G, S) is
    let Q be a queue
    q.enque(S);
    while Q is not empty do
        v = Q.deque()
        if v is not labeled as discovered then
            label v as discovered
            for all edges from v to w in G.adjacentEdges(v) in reverse order do 
                Q.enque(w)


Applications:
------------
1. Finding shortest path between nodes in a graph.
2. Building a Minimum Spanning Tree for unweighted graph.
3. Computing the maximum flow in a flow network.
4. Peer to Peer Networks.
5. Crawlers in Search Engines.
6. Social Networking suggestions.
7. GPS Navigation systems.
8. Broadcasting in Network.
9. In Garbage Collection.
